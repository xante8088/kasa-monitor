# Secure Multi-stage Dockerfile for Kasa Monitor
# Copyright (C) 2025 Kasa Monitor Contributors
# Licensed under GPL v3

# Stage 1: Build Frontend
FROM node:18.20-alpine3.20 AS frontend-builder

# Add security labels
LABEL security.scan="true" \
      maintainer="kasa-monitor" \
      version="1.0.0"

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user for build
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy package files with correct ownership
COPY --chown=nodejs:nodejs package.json package-lock.json ./

# Install dependencies as non-root
USER nodejs
RUN npm ci --no-audit --no-fund --omit=dev

# Copy source files
COPY --chown=nodejs:nodejs src/ ./src/
COPY --chown=nodejs:nodejs public/ ./public/
COPY --chown=nodejs:nodejs next.config.js tailwind.config.js tsconfig.json postcss.config.js next-env.d.ts ./

# Build the frontend
RUN npm run build

# Stage 2: Python Backend Base
FROM python:3.13.7-slim-bookworm AS backend-base

# Security updates
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    pkg-config \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

WORKDIR /app

# Copy and install Python dependencies
COPY requirements.txt ./

# Pin pip version and install with security options
RUN python -m pip install --upgrade pip==24.3.1 && \
    pip install --no-cache-dir --no-compile -r requirements.txt && \
    rm -rf /root/.cache/pip

# Stage 3: Final Runtime Image
FROM python:3.13.7-slim-bookworm AS runtime

# Security labels
LABEL security.scan="true" \
      security.updates="auto" \
      maintainer="kasa-monitor"

# Install only necessary runtime dependencies
RUN apt-get update && \
    apt-get upgrade -y && \
    apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    dumb-init \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install Node.js 18 LTS (security-patched version)
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y --no-install-recommends nodejs && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create app user with specific UID/GID
RUN groupadd -r -g 1001 appuser && \
    useradd -r -u 1001 -g appuser -d /app -s /sbin/nologin appuser

WORKDIR /app

# Copy Python dependencies from backend-base
COPY --from=backend-base --chown=appuser:appuser /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-base --chown=appuser:appuser /usr/local/bin /usr/local/bin

# Copy application files with correct ownership
COPY --chown=appuser:appuser backend/ ./backend/
COPY --chown=appuser:appuser LICENSE README.md ./

# Copy built frontend from frontend-builder
COPY --from=frontend-builder --chown=appuser:appuser /app/.next ./frontend/.next
COPY --from=frontend-builder --chown=appuser:appuser /app/public ./frontend/public
COPY --from=frontend-builder --chown=appuser:appuser /app/package.json ./frontend/
COPY --from=frontend-builder --chown=appuser:appuser /app/node_modules ./frontend/node_modules

# Copy startup scripts
COPY --chown=appuser:appuser start.sh docker-entrypoint.sh ./
RUN chmod 755 start.sh docker-entrypoint.sh

# Create directories with correct permissions
RUN mkdir -p /app/data /app/logs && \
    chown -R appuser:appuser /app && \
    chmod 700 /app/data /app/logs

# Security hardening
RUN chmod -R o-rwx /app && \
    find /app -type d -exec chmod 750 {} \; && \
    find /app -type f -exec chmod 640 {} \;

# Expose ports (documentation only)
EXPOSE 5272 3000

# Set security environment variables
ENV PYTHONPATH=/app \
    NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1 \
    SQLITE_PATH=/app/data/kasa_monitor.db \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    NODE_OPTIONS="--max-old-space-size=1024 --no-warnings"

# Health check with timeout
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:5272/health || exit 1

# Drop all capabilities except what's needed
USER appuser

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Default command
CMD ["./docker-entrypoint.sh"]