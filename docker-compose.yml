# Docker Compose for Kasa Monitor - Raspberry Pi 5 Optimized
# Copyright (C) 2025 Kasa Monitor Contributors
# Licensed under GPL v3
#
# NETWORK CONFIGURATION OPTIONS:
# This is the default BRIDGE mode configuration.
# Device discovery will NOT work in this mode - use manual IP entry.
#
# For automatic device discovery, use one of these instead:
#   - docker-compose.host.yml     (Simplest, Linux only)
#   - docker-compose.macvlan.yml  (Advanced, full isolation)
#
# See DOCKER_NETWORK_GUIDE.md for detailed setup instructions.

services:
  kasa-monitor:
    # Option 1: Use pre-built image from Docker Hub (recommended)
    # image: ${DOCKER_USERNAME:-kasa-monitor}/kasa-monitor:latest
    
    # Option 2: Build locally (for CI/testing)
    build:
      context: .
      dockerfile: Dockerfile
    
    container_name: kasa-monitor
    restart: unless-stopped
    ports:
      - "3000:3000"   # Frontend
      - "5272:5272"   # Backend API
    volumes:
      # Persist database and logs
      - kasa_data:/app/data
      - kasa_logs:/app/logs
      # Optional: Custom SSL certificates (uncomment if needed)
      # - kasa_ssl:/app/ssl:ro
    environment:
      # Database configuration
      - SQLITE_PATH=/app/data/kasa_monitor.db
      
      # Optional: InfluxDB configuration
      # - INFLUXDB_URL=http://localhost:8086
      # - INFLUXDB_TOKEN=your-token-here
      # - INFLUXDB_ORG=kasa-monitor
      # - INFLUXDB_BUCKET=device-data
      
      # Optional: TP-Link Cloud credentials for device discovery
      # - TPLINK_USERNAME=user@example.com
      # - TPLINK_PASSWORD=your-password
      
      # JWT Secret (will auto-generate if not provided)
      # - JWT_SECRET_KEY=your-secret-key-here
      
      # Network security settings
      - ALLOW_LOCAL_ONLY=true
      - ALLOWED_NETWORKS=192.168.0.0/16,10.0.0.0/8,172.16.0.0/12
      
      # SSL/HTTPS configuration (optional)
      # - USE_HTTPS=false
      # - SSL_CERT_PATH=/app/ssl/cert.pem
      # - SSL_KEY_PATH=/app/ssl/key.pem
      
      # Performance tuning for Raspberry Pi
      - NODE_OPTIONS=--max-old-space-size=1024
      - PYTHONUNBUFFERED=1
    
    networks:
      - kasa-network
    
    # Resource limits optimized for Raspberry Pi 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5272/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    
    # Security settings
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  # Optional: InfluxDB for advanced time-series data
  influxdb:
    image: influxdb:2.7-alpine
    container_name: kasa-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=kasaMonitor2025
      - DOCKER_INFLUXDB_INIT_ORG=kasa-monitor
      - DOCKER_INFLUXDB_INIT_BUCKET=device-data
    networks:
      - kasa-network
    profiles:
      - influxdb  # Only start with: docker-compose --profile influxdb up
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

networks:
  kasa-network:
    driver: bridge
    name: kasa-network

volumes:
  # Kasa Monitor data volumes
  kasa_data:
    driver: local
  kasa_logs:
    driver: local
  kasa_ssl:
    driver: local
  # InfluxDB volumes
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local