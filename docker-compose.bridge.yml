# Docker Compose - BRIDGE NETWORK MODE (Default)
# Best for: Security, isolation, manual device configuration
# Limitation: No automatic device discovery (use manual IP entry)
#
# Usage: docker-compose -f docker-compose.bridge.yml up
# This is essentially the same as the default docker-compose.yml

version: '3.8'

services:
  kasa-monitor:
    image: ${DOCKER_USERNAME:-xante8088}/kasa-monitor:latest
    
    # Build locally if needed
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    #   platforms:
    #     - linux/arm64
    
    container_name: kasa-monitor
    restart: unless-stopped
    
    ports:
      - "3000:3000"   # Frontend
      - "8000:8000"   # Backend API
    
    networks:
      - kasa-network
    
    volumes:
      - kasa_data:/app/data
      - kasa_logs:/app/logs
      
    environment:
      # Database
      - SQLITE_PATH=/app/data/kasa_monitor.db
      
      # Network Mode Indicator
      - NETWORK_MODE=bridge
      - DISCOVERY_ENABLED=false  # Discovery won't work in bridge mode
      - MANUAL_DEVICES_ENABLED=true  # Manual IP entry is required
      
      # Bridge mode specific - allow host network access
      - DOCKER_HOST_IP=host.docker.internal
      
      # Optional: InfluxDB
      # - INFLUXDB_URL=http://influxdb:8086
      # - INFLUXDB_TOKEN=your-token-here
      # - INFLUXDB_ORG=kasa-monitor
      # - INFLUXDB_BUCKET=device-data
      
      # Optional: TP-Link Cloud (can still work for cloud-based devices)
      # - TPLINK_USERNAME=user@example.com
      # - TPLINK_PASSWORD=your-password
      
      # Security
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-auto-generated}
      - ALLOW_LOCAL_ONLY=true
      - ALLOWED_NETWORKS=192.168.0.0/16,10.0.0.0/8,172.16.0.0/12
      
      # Performance (Raspberry Pi)
      - NODE_OPTIONS=--max-old-space-size=1024
      - PYTHONUNBUFFERED=1
    
    # Add host gateway for potential device access
    extra_hosts:
      - "host.docker.internal:host-gateway"
    
    # Resource limits for Raspberry Pi 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/devices"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    security_opt:
      - no-new-privileges:true
    
    # For bridge mode, we can still connect to host services
    depends_on:
      - influxdb

  # Optional: InfluxDB for time-series data
  influxdb:
    image: influxdb:2.7-alpine
    container_name: kasa-influxdb
    restart: unless-stopped
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=kasaMonitor2025
      - DOCKER_INFLUXDB_INIT_ORG=kasa-monitor
      - DOCKER_INFLUXDB_INIT_BUCKET=device-data
    networks:
      - kasa-network
    profiles:
      - influxdb  # Only start with: docker-compose --profile influxdb up
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

networks:
  kasa-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  kasa_data:
    driver: local
  kasa_logs:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local