name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ created ]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: xante8088/kasa-monitor

jobs:
  # Linting and code quality checks
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort
        pip install -r backend/requirements.txt
    
    - name: Run Python linters
      run: |
        # Check code formatting with black
        black --check backend/
        
        # Check import sorting with isort
        isort --check-only backend/
        
        # Run flake8
        flake8 backend/ --max-line-length=120 --exclude=venv,migrations || true
        
        # Run pylint
        pylint backend/*.py --disable=C0111,R0903,R0913,W0613 || true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Node dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint || true

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.before || 'HEAD~1' }}
        head: HEAD
        extra_args: --only-verified

  # Unit tests
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Run unit tests
      env:
        SQLITE_PATH: test.db
        JWT_SECRET_KEY: test_secret_key
        REDIS_URL: redis://localhost:6379
      run: |
        cd backend
        python -m pytest tests/ -v --cov=. --cov-report=xml
    
    - name: Run test framework
      run: |
        cd backend
        python tests/test_framework.py
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend tests
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run unit tests
      run: npm test -- --coverage --watchAll=false || true
    
    - name: Build frontend
      run: npm run build

  # Integration tests
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
    
    - name: Build Docker images with cache
      env:
        DOCKER_BUILDKIT: 1
        BUILDKIT_PROGRESS: plain
      run: |
        # Export cache settings for docker-compose
        export BUILDKIT_INLINE_CACHE=1
        
        # Build with comprehensive caching
        docker compose -f docker-compose.yml build \
          --build-arg BUILDKIT_INLINE_CACHE=1
    
    - name: Start services
      run: |
        docker compose -f docker-compose.yml up -d
        sleep 30  # Initial wait for services to start
    
    - name: Wait for health check
      run: |
        # Wait up to 120 seconds for the health endpoint to be available
        for i in {1..24}; do
          if curl -f http://localhost:5272/health; then
            echo "Health check passed!"
            break
          fi
          echo "Attempt $i/24: Health check failed, waiting 5 seconds..."
          sleep 5
          if [ $i -eq 24 ]; then
            echo "Health check failed after 2 minutes"
            docker compose logs
            exit 1
          fi
        done
    
    - name: Run integration tests
      run: |
        # Check health endpoint
        curl -f http://localhost:5272/health || exit 1
        
        # Run endpoint tests
        cd backend
        python test_endpoints.py || true
    
    - name: Show logs on failure
      if: failure()
      run: |
        docker compose logs
    
    - name: Stop services
      if: always()
      run: |
        docker compose down

  # Build and push Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, security, test-backend, test-frontend]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          network=host
          image=moby/buildkit:buildx-stable-1
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # Branch-based tags
          type=ref,event=branch
          type=ref,event=pr
          
          # Semantic version tags (when git tags exist)
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}.{{patch}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          
          # Automatic version tags for main branch builds
          type=raw,value=1.0.{{date 'YYYYMMDD'}},enable={{is_default_branch}}
          type=raw,value=1.0,enable={{is_default_branch}}
          type=raw,value=1,enable={{is_default_branch}}
          
          # Latest tag for main branch
          type=raw,value=latest,enable={{is_default_branch}}
          
          # Git commit SHA (short)
          type=sha,format=short
          
          # Date-based tag for tracking
          type=raw,value={{date 'YYYY-MM-DD-HHmm'}}
        
        flavor: |
          latest=false
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        # Multi-tier caching strategy
        cache-from: |
          type=gha,scope=buildkit-${{ github.ref_name }}
          type=gha,scope=buildkit-main
          type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ github.ref_name }}
          type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:cache-main
        cache-to: |
          type=gha,scope=buildkit-${{ github.ref_name }},mode=max
          type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:cache-${{ github.ref_name }},mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
    
    permissions:
      contents: read
      deployments: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
        # Example: ssh deploy@staging.server 'docker pull image && docker-compose up -d'

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
    
    permissions:
      contents: read
      deployments: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create deployment
      uses: actions/github-script@v7
      env:
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL || 'https://kasa-monitor.example.com' }}
      with:
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            required_contexts: [],
            auto_merge: false
          });
          
          await github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: deployment.data.id,
            state: 'in_progress',
            environment_url: process.env.PRODUCTION_URL || 'https://kasa-monitor.example.com'
          });
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
    
    - name: Run smoke tests
      run: |
        sleep 30
        # Only run smoke tests if PRODUCTION_URL is set and not the default example
        if [[ -n "$PRODUCTION_URL" && "$PRODUCTION_URL" != "https://kasa-monitor.example.com" ]]; then
          echo "Running smoke tests against: $PRODUCTION_URL"
          curl -f "$PRODUCTION_URL/health" || exit 1
          echo "Smoke tests passed!"
        else
          echo "Skipping smoke tests - PRODUCTION_URL not configured or using example domain"
          echo "To enable smoke tests, set PRODUCTION_URL secret to your actual production domain"
        fi
      env:
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL || 'https://kasa-monitor.example.com' }}
    
    - name: Update deployment status
      if: always()
      uses: actions/github-script@v7
      env:
        PRODUCTION_URL: ${{ secrets.PRODUCTION_URL || 'https://kasa-monitor.example.com' }}
      with:
        script: |
          // Get the latest deployment
          const deployments = await github.rest.repos.listDeployments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            environment: 'production'
          });
          
          if (deployments.data.length > 0) {
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployments.data[0].id,
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environment_url: process.env.PRODUCTION_URL || 'https://kasa-monitor.example.com'
            });
          }

  # Create release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs: [deploy-production]
    
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release Notes
      id: release_notes
      run: |
        # Get the previous tag for changelog
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "# 🎉 Release ${{ github.ref_name }}" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Add commit information
        echo "## 📝 What's Changed" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        if [ -n "$PREV_TAG" ]; then
          git log --pretty=format:"- %s (%an)" ${PREV_TAG}..HEAD >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${{ github.ref_name }}" >> RELEASE_NOTES.md
        else
          echo "- Initial release" >> RELEASE_NOTES.md
        fi
        
        echo "" >> RELEASE_NOTES.md
        echo "## 🐳 Docker Images" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Multi-Platform Support" >> RELEASE_NOTES.md
        echo "This release supports both AMD64 and ARM64 architectures (including Raspberry Pi 5)." >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "### Available Tags" >> RELEASE_NOTES.md
        echo "\`\`\`bash" >> RELEASE_NOTES.md
        echo "# Specific version" >> RELEASE_NOTES.md
        echo "docker pull ${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "# Latest stable" >> RELEASE_NOTES.md
        echo "docker pull ${{ env.IMAGE_NAME }}:latest" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "# Platform specific (Raspberry Pi 5)" >> RELEASE_NOTES.md
        echo "docker pull ${{ env.IMAGE_NAME }}:pi5" >> RELEASE_NOTES.md
        echo "\`\`\`" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "## 🚀 Quick Start" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "\`\`\`bash" >> RELEASE_NOTES.md
        echo "# Clone the repository" >> RELEASE_NOTES.md
        echo "git clone https://github.com/${{ github.repository }}.git" >> RELEASE_NOTES.md
        echo "cd kasa-monitor" >> RELEASE_NOTES.md
        echo "git checkout ${{ github.ref_name }}" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "# Start with Docker Compose" >> RELEASE_NOTES.md
        echo "docker-compose up -d" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "# Or run directly" >> RELEASE_NOTES.md
        echo "docker run -p 5272:5272 -p 3000:3000 ${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> RELEASE_NOTES.md
        echo "\`\`\`" >> RELEASE_NOTES.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: ${{ contains(github.ref, '-rc') || contains(github.ref, '-beta') }}
        files: |
          backend/requirements.txt
          package.json
          docker-compose.yml

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Send Slack notification
      if: env.SLACK_WEBHOOK != ''
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          MESSAGE="✅ Deployment successful for ${{ github.ref_name }}"
        else
          MESSAGE="❌ Deployment failed for ${{ github.ref_name }}"
        fi
        
        curl -X POST $SLACK_WEBHOOK \
          -H 'Content-Type: application/json' \
          -d "{\"text\":\"$MESSAGE\",\"username\":\"GitHub Actions\",\"icon_emoji\":\":rocket:\"}"