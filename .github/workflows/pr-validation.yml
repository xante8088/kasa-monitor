name: Pull Request Validation

# Lightweight validation for pull requests only
# Provides fast feedback without heavy processing

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quick-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quick-
        
    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8
        
    - name: Python format check
      run: |
        echo "🔍 Checking Python code formatting..."
        black --check backend/ || (echo "❌ Black formatting needed. Run: black backend/" && exit 1)
        isort --check-only backend/ || (echo "❌ Import sorting needed. Run: isort backend/" && exit 1)
        echo "✅ Python formatting is correct"
        
    - name: Python linting
      run: |
        echo "🔍 Running Python linting..."
        flake8 backend/ --max-line-length=120 --exclude=venv,migrations --count --statistics || true
        
    - name: Set up Node.js
      uses: actions/setup-node@v5
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install Node dependencies
      run: |
        echo "📦 Installing Node.js dependencies..."
        npm ci --silent
        
    - name: Frontend linting
      run: |
        echo "🔍 Running frontend linting..."
        npm run lint || (echo "❌ Frontend linting failed. Run: npm run lint" && exit 1)
        echo "✅ Frontend linting passed"
        
    - name: TypeScript type check
      run: |
        echo "🔍 Checking TypeScript types..."
        npx tsc --noEmit || (echo "❌ TypeScript type errors found" && exit 1)
        echo "✅ TypeScript types are correct"
        
    - name: Quick build test
      run: |
        echo "🔍 Testing quick build..."
        npm run build > /dev/null 2>&1 || (echo "❌ Build failed" && exit 1)
        echo "✅ Build test passed"

  security-check:
    name: Basic Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Run TruffleHog Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.pull_request.base.sha }}
        head: ${{ github.event.pull_request.head.sha }}
        extra_args: --only-verified --max-depth=3
        
  pr-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [quick-validation, security-check]
    if: always()
    
    steps:
    - name: PR Validation Summary
      run: |
        echo "## 🔍 Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Formatting | ${{ needs.quick-validation.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.quick-validation.result }}" == "success" && "${{ needs.security-check.result }}" == "success" ]]; then
          echo "🎉 **All validation checks passed!** This PR is ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Some validation checks failed.** Please review and fix the issues above." >> $GITHUB_STEP_SUMMARY
        fi