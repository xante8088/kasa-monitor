# Manual trigger for Docker cleanup
# You can run this workflow manually from GitHub Actions tab

name: Manual Docker Cleanup
on:
  workflow_dispatch:
    inputs:
      keep_count:
        description: 'Number of recent images to keep'
        required: false
        default: '5'
        type: string
      dry_run:
        description: 'Dry run (preview what would be deleted)'
        required: false
        default: false
        type: boolean

jobs:
  cleanup:
    name: Manual Docker Cleanup
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: List packages (dry run)
      if: ${{ inputs.dry_run == 'true' }}
      uses: actions/github-script@v7
      with:
        script: |
          try {
            // First, let's list all packages to see what's available
            console.log('=== Listing all packages for user ===');
            const { data: allPackages } = await github.rest.packages.listPackagesForUser({
              package_type: 'container',
              username: context.repo.owner
            });
            
            console.log(`Found ${allPackages.length} packages:`);
            allPackages.forEach(pkg => {
              console.log(`- ${pkg.name} (visibility: ${pkg.visibility})`);
            });
            
            // Now try to find our specific package
            const packageNames = ['kasa-monitor', context.repo.repo, `${context.repo.owner}/${context.repo.repo}`];
            let packages = [];
            let foundPackageName = null;
            
            for (const pkgName of packageNames) {
              try {
                console.log(`\n=== Trying package name: ${pkgName} ===`);
                const { data: pkgVersions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                  package_type: 'container',
                  package_name: pkgName,
                  username: context.repo.owner
                });
                packages = pkgVersions;
                foundPackageName = pkgName;
                console.log(`✅ Found package: ${pkgName} with ${packages.length} versions`);
                break;
              } catch (error) {
                console.log(`❌ Package ${pkgName} not found: ${error.message}`);
              }
            }
            
            if (packages.length === 0) {
              console.log('❌ No package versions found. Check if the package exists or if permissions are correct.');
              return;
            }
            
            console.log(`\n=== Package: ${foundPackageName} ===`);
            console.log(`Total package versions: ${packages.length}`);
            console.log(`Would keep: ${context.payload.inputs.keep_count} versions`);
            console.log(`Would delete: ${Math.max(0, packages.length - parseInt(context.payload.inputs.keep_count))} versions`);
            
            if (packages.length > parseInt(context.payload.inputs.keep_count)) {
              const toDelete = packages.slice(parseInt(context.payload.inputs.keep_count));
              console.log('\nVersions that would be deleted:');
              toDelete.forEach((pkg, index) => {
                console.log(`${index + 1}. ID: ${pkg.id}, Tags: ${pkg.metadata?.container?.tags?.join(', ') || 'none'}, Created: ${pkg.created_at}`);
              });
            } else {
              console.log('\n✅ No packages would be deleted (keeping more than available).');
            }
            
          } catch (error) {
            console.error('Error:', error.message);
            console.error('Full error:', error);
          }

    - name: Find correct package name
      if: ${{ inputs.dry_run != 'true' }}
      id: find_package
      uses: actions/github-script@v7
      with:
        script: |
          const packageNames = ['kasa-monitor', context.repo.repo, `${context.repo.owner}/${context.repo.repo}`];
          
          for (const pkgName of packageNames) {
            try {
              const { data: pkgVersions } = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
                package_type: 'container',
                package_name: pkgName,
                username: context.repo.owner
              });
              
              if (pkgVersions.length > 0) {
                console.log(`Found package: ${pkgName} with ${pkgVersions.length} versions`);
                core.setOutput('package_name', pkgName);
                core.setOutput('package_found', 'true');
                return;
              }
            } catch (error) {
              console.log(`Package ${pkgName} not found`);
            }
          }
          
          core.setOutput('package_found', 'false');
          console.log('No package found');

    - name: Delete old package versions
      if: ${{ inputs.dry_run != 'true' && steps.find_package.outputs.package_found == 'true' }}
      uses: actions/delete-package-versions@v5
      with:
        package-name: ${{ steps.find_package.outputs.package_name }}
        package-type: 'container'
        min-versions-to-keep: ${{ inputs.keep_count }}
        delete-only-untagged-versions: false
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: No package found warning
      if: ${{ inputs.dry_run != 'true' && steps.find_package.outputs.package_found != 'true' }}
      run: |
        echo "⚠️  No Docker packages found to clean up."
        echo "This could mean:"
        echo "  - No Docker images have been pushed to GitHub Container Registry"
        echo "  - The package name doesn't match expected patterns"
        echo "  - Insufficient permissions to access packages"