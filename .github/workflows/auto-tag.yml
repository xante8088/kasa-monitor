name: Auto Tag on Push

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - '.github/workflows/*.yml'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    # Skip if commit message contains [skip tag] or [skip ci]
    if: |
      !contains(github.event.head_commit.message, '[skip tag]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, 'chore: Update version to')
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for all tags and branches
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Get latest tag
      id: get_tag
      run: |
        # Get the latest tag, or set to v0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        
        # Extract version numbers
        VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
        
        # Default values if parsing fails
        MAJOR=${MAJOR:-0}
        MINOR=${MINOR:-0}
        PATCH=${PATCH:-0}
        
        echo "major=$MAJOR" >> $GITHUB_OUTPUT
        echo "minor=$MINOR" >> $GITHUB_OUTPUT
        echo "patch=$PATCH" >> $GITHUB_OUTPUT
    
    - name: Determine version bump type
      id: bump_type
      run: |
        # Check commit message for version bump indicators
        COMMIT_MSG="${{ github.event.head_commit.message }}"
        
        if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"major:"* ]]; then
          echo "type=major" >> $GITHUB_OUTPUT
          echo "Bump type: MAJOR"
        elif [[ "$COMMIT_MSG" == *"feat:"* ]] || [[ "$COMMIT_MSG" == *"feature:"* ]] || [[ "$COMMIT_MSG" == *"minor:"* ]]; then
          echo "type=minor" >> $GITHUB_OUTPUT
          echo "Bump type: MINOR"
        else
          echo "type=patch" >> $GITHUB_OUTPUT
          echo "Bump type: PATCH"
        fi
    
    - name: Calculate new version
      id: new_version
      run: |
        MAJOR=${{ steps.get_tag.outputs.major }}
        MINOR=${{ steps.get_tag.outputs.minor }}
        PATCH=${{ steps.get_tag.outputs.patch }}
        BUMP_TYPE=${{ steps.bump_type.outputs.type }}
        
        if [[ "$BUMP_TYPE" == "major" ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [[ "$BUMP_TYPE" == "minor" ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi
        
        NEW_TAG="v${MAJOR}.${MINOR}.${PATCH}"
        echo "New tag: $NEW_TAG"
        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "version=${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        # Get commit messages since last tag
        LATEST_TAG=${{ steps.get_tag.outputs.latest_tag }}
        
        if [[ "$LATEST_TAG" == "v0.0.0" ]]; then
          # First release - get all commits
          COMMITS=$(git log --pretty=format:"- %s (%an)" | head -20)
        else
          # Get commits since last tag
          COMMITS=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%an)")
        fi
        
        # Create changelog
        CHANGELOG="## What's Changed

        ${COMMITS}

        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.get_tag.outputs.latest_tag }}...${{ steps.new_version.outputs.new_tag }}"
        
        # Escape for GitHub Actions
        CHANGELOG="${CHANGELOG//'%'/'%25'}"
        CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
        CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
        
        echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT
    
    - name: Update version file
      run: |
        # Update version.json with new version info
        cat > version.json << EOF
        {
          "version": "${{ steps.new_version.outputs.version }}",
          "lastUpdated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "gitTag": "${{ steps.new_version.outputs.new_tag }}",
          "gitCommit": "${{ github.sha }}",
          "dockerImage": "${{ github.repository_owner }}/kasa-monitor",
          "buildDate": "$(date -u +"%Y-%m-%d")"
        }
        EOF
        
        # Configure git
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # Commit version file
        git add version.json
        git commit -m "chore: Update version to ${{ steps.new_version.outputs.new_tag }} [skip ci]" || true
        git push origin main || true
    
    - name: Create and push tag
      run: |
        NEW_TAG=${{ steps.new_version.outputs.new_tag }}
        
        # Create annotated tag
        git tag -a "$NEW_TAG" -m "Release $NEW_TAG

        Automated release created by GitHub Actions
        
        Commit: ${{ github.sha }}
        Author: ${{ github.event.head_commit.author.name }}
        Message: ${{ github.event.head_commit.message }}"
        
        # Push tag
        git push origin "$NEW_TAG"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.new_version.outputs.new_tag }}
        release_name: Release ${{ steps.new_version.outputs.new_tag }}
        body: |
          ## 🎉 Release ${{ steps.new_version.outputs.new_tag }}
          
          ### 📝 Commit Details
          - **SHA**: ${{ github.sha }}
          - **Author**: ${{ github.event.head_commit.author.name }}
          - **Message**: ${{ github.event.head_commit.message }}
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### 🐳 Docker Image
          ```bash
          docker pull ${{ github.repository_owner }}/kasa-monitor:${{ steps.new_version.outputs.version }}
          docker pull ${{ github.repository_owner }}/kasa-monitor:latest
          ```
          
          ### 📦 Installation
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd kasa-monitor
          git checkout ${{ steps.new_version.outputs.new_tag }}
          docker-compose up -d
          ```
        draft: false
        prerelease: false
    
    - name: Update Docker build workflow
      if: success()
      run: |
        echo "Tag ${{ steps.new_version.outputs.new_tag }} created successfully"
        echo "This will trigger Docker build with version: ${{ steps.new_version.outputs.version }}"
    
    - name: Summary
      run: |
        echo "## 🏷️ Auto Tag Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Version Update" >> $GITHUB_STEP_SUMMARY
        echo "- **Previous Tag**: ${{ steps.get_tag.outputs.latest_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **New Tag**: ${{ steps.new_version.outputs.new_tag }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Bump Type**: ${{ steps.bump_type.outputs.type }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Commit Information" >> $GITHUB_STEP_SUMMARY
        echo "- **SHA**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Author**: ${{ github.event.head_commit.author.name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Message**: ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "✅ Tag created and pushed" >> $GITHUB_STEP_SUMMARY
        echo "✅ GitHub Release created" >> $GITHUB_STEP_SUMMARY
        echo "🔄 Docker build will be triggered with new version" >> $GITHUB_STEP_SUMMARY